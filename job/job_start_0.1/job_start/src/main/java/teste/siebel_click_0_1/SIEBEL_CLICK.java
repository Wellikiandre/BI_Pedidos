// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package teste.siebel_click_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: SIEBEL_CLICK Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class SIEBEL_CLICK implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "SIEBEL_CLICK";
	private final String projectName = "TESTE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				SIEBEL_CLICK.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(SIEBEL_CLICK.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class SAIDAStruct implements routines.system.IPersistableRow<SAIDAStruct> {
    final static byte[] commonByteArrayLock_TESTE_SIEBEL_CLICK = new byte[0];
    static byte[] commonByteArray_TESTE_SIEBEL_CLICK = new byte[0];

	
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}
				
			    public String UF;

				public String getUF () {
					return this.UF;
				}
				
			    public String NUMERO_PEDIDO;

				public String getNUMERO_PEDIDO () {
					return this.NUMERO_PEDIDO;
				}
				
			    public java.util.Date DATA_ABERTURA_PRIMEIRA;

				public java.util.Date getDATA_ABERTURA_PRIMEIRA () {
					return this.DATA_ABERTURA_PRIMEIRA;
				}
				
			    public String FAIXA_AGING_PEDIDO;

				public String getFAIXA_AGING_PEDIDO () {
					return this.FAIXA_AGING_PEDIDO;
				}
				
			    public Integer AGING_DAY_CLIENTE;

				public Integer getAGING_DAY_CLIENTE () {
					return this.AGING_DAY_CLIENTE;
				}
				
			    public java.util.Date INICIOAGENDAMENTO;

				public java.util.Date getINICIOAGENDAMENTO () {
					return this.INICIOAGENDAMENTO;
				}
				
			    public String FLAG_TIPO;

				public String getFLAG_TIPO () {
					return this.FLAG_TIPO;
				}
				
			    public String FAIXA_AGENDAMENTO;

				public String getFAIXA_AGENDAMENTO () {
					return this.FAIXA_AGENDAMENTO;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TESTE_SIEBEL_CLICK.length) {
				if(length < 1024 && commonByteArray_TESTE_SIEBEL_CLICK.length == 0) {
   					commonByteArray_TESTE_SIEBEL_CLICK = new byte[1024];
				} else {
   					commonByteArray_TESTE_SIEBEL_CLICK = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TESTE_SIEBEL_CLICK, 0, length);
			strReturn = new String(commonByteArray_TESTE_SIEBEL_CLICK, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TESTE_SIEBEL_CLICK) {

        	try {

        		int length = 0;
		
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.NUMERO_PEDIDO = readString(dis);
					
					this.DATA_ABERTURA_PRIMEIRA = readDate(dis);
					
					this.FAIXA_AGING_PEDIDO = readString(dis);
					
						this.AGING_DAY_CLIENTE = readInteger(dis);
					
					this.INICIOAGENDAMENTO = readDate(dis);
					
					this.FLAG_TIPO = readString(dis);
					
					this.FAIXA_AGENDAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.NUMERO_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ABERTURA_PRIMEIRA,dos);
					
					// String
				
						writeString(this.FAIXA_AGING_PEDIDO,dos);
					
					// Integer
				
						writeInteger(this.AGING_DAY_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.INICIOAGENDAMENTO,dos);
					
					// String
				
						writeString(this.FLAG_TIPO,dos);
					
					// String
				
						writeString(this.FAIXA_AGENDAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CIDADE="+CIDADE);
		sb.append(",UF="+UF);
		sb.append(",NUMERO_PEDIDO="+NUMERO_PEDIDO);
		sb.append(",DATA_ABERTURA_PRIMEIRA="+String.valueOf(DATA_ABERTURA_PRIMEIRA));
		sb.append(",FAIXA_AGING_PEDIDO="+FAIXA_AGING_PEDIDO);
		sb.append(",AGING_DAY_CLIENTE="+String.valueOf(AGING_DAY_CLIENTE));
		sb.append(",INICIOAGENDAMENTO="+String.valueOf(INICIOAGENDAMENTO));
		sb.append(",FLAG_TIPO="+FLAG_TIPO);
		sb.append(",FAIXA_AGENDAMENTO="+FAIXA_AGENDAMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SAIDAStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_TESTE_SIEBEL_CLICK = new byte[0];
    static byte[] commonByteArray_TESTE_SIEBEL_CLICK = new byte[0];

	
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}
				
			    public String UF;

				public String getUF () {
					return this.UF;
				}
				
			    public String NUMERO_PEDIDO;

				public String getNUMERO_PEDIDO () {
					return this.NUMERO_PEDIDO;
				}
				
			    public java.util.Date DATA_ABERTURA_PRIMEIRA;

				public java.util.Date getDATA_ABERTURA_PRIMEIRA () {
					return this.DATA_ABERTURA_PRIMEIRA;
				}
				
			    public String FAIXA_AGING_PEDIDO;

				public String getFAIXA_AGING_PEDIDO () {
					return this.FAIXA_AGING_PEDIDO;
				}
				
			    public Integer AGING_DAY_CLIENTE;

				public Integer getAGING_DAY_CLIENTE () {
					return this.AGING_DAY_CLIENTE;
				}
				
			    public java.util.Date INICIOAGENDAMENTO;

				public java.util.Date getINICIOAGENDAMENTO () {
					return this.INICIOAGENDAMENTO;
				}
				
			    public String FLAG_TIPO;

				public String getFLAG_TIPO () {
					return this.FLAG_TIPO;
				}
				
			    public String FAIXA_AGENDAMENTO;

				public String getFAIXA_AGENDAMENTO () {
					return this.FAIXA_AGENDAMENTO;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TESTE_SIEBEL_CLICK.length) {
				if(length < 1024 && commonByteArray_TESTE_SIEBEL_CLICK.length == 0) {
   					commonByteArray_TESTE_SIEBEL_CLICK = new byte[1024];
				} else {
   					commonByteArray_TESTE_SIEBEL_CLICK = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TESTE_SIEBEL_CLICK, 0, length);
			strReturn = new String(commonByteArray_TESTE_SIEBEL_CLICK, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TESTE_SIEBEL_CLICK) {

        	try {

        		int length = 0;
		
					this.CIDADE = readString(dis);
					
					this.UF = readString(dis);
					
					this.NUMERO_PEDIDO = readString(dis);
					
					this.DATA_ABERTURA_PRIMEIRA = readDate(dis);
					
					this.FAIXA_AGING_PEDIDO = readString(dis);
					
						this.AGING_DAY_CLIENTE = readInteger(dis);
					
					this.INICIOAGENDAMENTO = readDate(dis);
					
					this.FLAG_TIPO = readString(dis);
					
					this.FAIXA_AGENDAMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.NUMERO_PEDIDO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ABERTURA_PRIMEIRA,dos);
					
					// String
				
						writeString(this.FAIXA_AGING_PEDIDO,dos);
					
					// Integer
				
						writeInteger(this.AGING_DAY_CLIENTE,dos);
					
					// java.util.Date
				
						writeDate(this.INICIOAGENDAMENTO,dos);
					
					// String
				
						writeString(this.FLAG_TIPO,dos);
					
					// String
				
						writeString(this.FAIXA_AGENDAMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CIDADE="+CIDADE);
		sb.append(",UF="+UF);
		sb.append(",NUMERO_PEDIDO="+NUMERO_PEDIDO);
		sb.append(",DATA_ABERTURA_PRIMEIRA="+String.valueOf(DATA_ABERTURA_PRIMEIRA));
		sb.append(",FAIXA_AGING_PEDIDO="+FAIXA_AGING_PEDIDO);
		sb.append(",AGING_DAY_CLIENTE="+String.valueOf(AGING_DAY_CLIENTE));
		sb.append(",INICIOAGENDAMENTO="+String.valueOf(INICIOAGENDAMENTO));
		sb.append(",FLAG_TIPO="+FLAG_TIPO);
		sb.append(",FAIXA_AGENDAMENTO="+FAIXA_AGENDAMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
SAIDAStruct SAIDA = new SAIDAStruct();





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SAIDA");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/develop/BI_Pedido_FTTH/repositorio_job/siebel_click.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("CIDADE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("UF");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("NUMERO_PEDIDO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("DATA_ABERTURA_PRIMEIRA");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("FAIXA_AGING_PEDIDO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("AGING_DAY_CLIENTE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("INICIOAGENDAMENTO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("FLAG_TIPO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("FAIXA_AGENDAMENTO");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
SAIDAStruct SAIDA_tmp = new SAIDAStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:ufUTVw0oW0jaVVMd1PMMQE1JYcrgV1xaYTa29w==");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
		    String port_tDBInput_1 = "1446";
		    String dbname_tDBInput_1 = "BDDOP" ;		    
		    String url_tDBInput_1 = "jdbc:sqlserver://" + "sqlpw90db06" ;
		    if (!"".equals(port_tDBInput_1)) {
		    	url_tDBInput_1 += ":" + "1446";
		    }
		    if (!"".equals(dbname_tDBInput_1)) {		    
		    	url_tDBInput_1 += ";databaseName=" + "BDDOP"; 
		    }
		    url_tDBInput_1 += ";appName=" + projectName + ";" + "integratedSecurity=true";
		    String dbschema_tDBInput_1 = "dbo";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "use BDDOP\nDeclare @delay decimal\nset @delay = 0.1\nSELECT CIDADE,UF,NUM_DOCUMENTO AS NUMERO_PEDIDO ,DATA_ABERTURA_PRI"
+"MEIRA, FAIXA_AGING_PEDIDO,AGING_DAY_CLIENTE,INICIOAGENDAMENTO,[FLAG TIPO],\nCASE\nWHEN FAIXA_AGENDAMENTO IS NULL THEN 'F"
+"ORA DO CLICK'\nELSE FAIXA_AGENDAMENTO END AS FAIXA_AGENDAMENTO\nFROM (SELECT UF,NUM_AREA_ATUAL AS CIDADE,NUM_DOCUMENTO,D"
+"ATA_ABERTURA_PRIMEIRA,\nCASE \n		WHEN DATEDIFF(DAY, DATA_ABERTURA_PRIMEIRA, DATA_ATUALIZACAO -@delay) IS NULL THEN 'SEM "
+"DATA DE ABERTURA' \n		WHEN DATEDIFF(DAY, DATA_ABERTURA_PRIMEIRA, DATA_ATUALIZACAO -@delay) >= '0' AND DATEDIFF(DAY, DATA"
+"_ABERTURA_PRIMEIRA, DATA_ATUALIZACAO -@delay) <= '4' THEN '0-4 DIAS'\n		WHEN DATEDIFF(DAY, DATA_ABERTURA_PRIMEIRA, DATA_"
+"ATUALIZACAO -@delay) > '4' AND DATEDIFF(DAY, DATA_ABERTURA_PRIMEIRA, DATA_ATUALIZACAO -@delay) <= '7' THEN '5-7 DIAS' \n"
+"		WHEN DATEDIFF(DAY, DATA_ABERTURA_PRIMEIRA, DATA_ATUALIZACAO -@delay) > '7' AND DATEDIFF(DAY, DATA_ABERTURA_PRIMEIRA, D"
+"ATA_ATUALIZACAO -@delay) <= '12' THEN '8-12 DIAS' \n		WHEN DATEDIFF(DAY, DATA_ABERTURA_PRIMEIRA, DATA_ATUALIZACAO -@dela"
+"y) > '12' AND DATEDIFF(DAY, DATA_ABERTURA_PRIMEIRA, DATA_ATUALIZACAO -@delay) <= '20' THEN '13-20 DIAS' \n		WHEN DATEDIF"
+"F(DAY, DATA_ABERTURA_PRIMEIRA, DATA_ATUALIZACAO -@delay) > '20' AND DATEDIFF(DAY, DATA_ABERTURA_PRIMEIRA, DATA_ATUALIZAC"
+"AO -@delay) <= '30' THEN '21-30 DIAS' \n		WHEN DATEDIFF(DAY, DATA_ABERTURA_PRIMEIRA, DATA_ATUALIZACAO -@delay) > '30' TH"
+"EN 'ACIMA DE 30 DIAS' \n	   END AS FAIXA_AGING_PEDIDO,\n	   DATEDIFF(DAY, DATA_ABERTURA_PRIMEIRA, DATA_ATUALIZACAO -@del"
+"ay) AS AGING_DAY_CLIENTE,\n	   CASE\n		WHEN TIPO_INSTALACAO = 'N' THEN 'INST' \n	 	WHEN PDV_SAP = '1044817' and TIPO_INS"
+"TALACAO = 'S' THEN 'MIG SUPORTE TECNICO' ELSE 'MIG DEMAIS CANAIS' \n	   END AS [FLAG TIPO]\nFROM SIEBEL_SERVICO_ABERTO_F"
+"TTH_BOV\nWHERE DATA_ATUALIZACAO = (SELECT MAX(DATA_ATUALIZACAO) FROM SIEBEL_SERVICO_ABERTO_FTTH_BOV)\nAND (MACROATIVIDAD"
+"E = 'INST') AND (FLAG_CADEIA = 'S'))SIEBEL LEFT JOIN (SELECT DISTINCT DOCUMENTOASSOCIADO,INICIOAGENDAMENTO,\nCASE\n	WHEN"
+" INICIOAGENDAMENTO IS NULL THEN 'SEM AGENDAMENTO'\n	WHEN DATEDIFF(DAY,CONVERT(DATE,GETDATE()),INICIOAGENDAMENTO) < 0 THE"
+"N 'AGENDAMENTO ULTRAPASSADO'\n	WHEN DATEDIFF(DAY,CONVERT(DATE,GETDATE()),INICIOAGENDAMENTO) >= 0 AND \nDATEDIFF(DAY,CONV"
+"ERT(DATE,GETDATE()),INICIOAGENDAMENTO) < 1 THEN 'AGENDADO PARA HOJE'\n	WHEN DATEDIFF(DAY,CONVERT(DATE,GETDATE()),INICIOA"
+"GENDAMENTO) >= 1 AND \nDATEDIFF(DAY,CONVERT(DATE,GETDATE()),INICIOAGENDAMENTO) < 2 THEN 'AGENDADO D+1'\n	WHEN DATEDIFF(D"
+"AY,CONVERT(DATE,GETDATE()),INICIOAGENDAMENTO) >= 2 AND \nDATEDIFF(DAY,CONVERT(DATE,GETDATE()),INICIOAGENDAMENTO) < 3 THE"
+"N 'AGENDADO D+2'\n	WHEN DATEDIFF(DAY,CONVERT(DATE,GETDATE()),INICIOAGENDAMENTO) >= 3 AND \nDATEDIFF(DAY,CONVERT(DATE,GET"
+"DATE()),INICIOAGENDAMENTO) < 4 THEN 'AGENDADO D+3'\n	WHEN DATEDIFF(DAY,CONVERT(DATE,GETDATE()),INICIOAGENDAMENTO) >= 4 A"
+"ND \nDATEDIFF(DAY,CONVERT(DATE,GETDATE()),INICIOAGENDAMENTO) < 5 THEN 'AGENDADO D+4'\n	WHEN DATEDIFF(DAY,CONVERT(DATE,GE"
+"TDATE()),INICIOAGENDAMENTO) >= 5 AND \nDATEDIFF(DAY,CONVERT(DATE,GETDATE()),INICIOAGENDAMENTO) < 6 THEN 'AGENDADO D+5'\n"
+"	WHEN DATEDIFF(DAY,CONVERT(DATE,GETDATE()),INICIOAGENDAMENTO) >= 6 AND \nDATEDIFF(DAY,CONVERT(DATE,GETDATE()),INICIOAGEN"
+"DAMENTO) < 7 THEN 'AGENDADO D+6'\n	WHEN DATEDIFF(DAY,CONVERT(DATE,GETDATE()),INICIOAGENDAMENTO) >= 7 AND \nDATEDIFF(DAY,"
+"CONVERT(DATE,GETDATE()),INICIOAGENDAMENTO) < 8 THEN 'AGENDADO D+7'\n	ELSE 'AGENDADO PARA > D+7'\nEND AS FAIXA_AGENDAMENT"
+"O\nFROM CLICK_ABERTAS\nWHERE SKILLS LIKE '%FTTH%' AND ATIVIDADE <> 'INSTALAR JUMPER FTTH' \nAND DATAINDICADOR = (SELECT "
+"MAX(DATAINDICADOR) FROM CLICK_ABERTAS)\n)CLICK ON SIEBEL.NUM_DOCUMENTO=CLICK.DOCUMENTOASSOCIADO";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.CIDADE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CIDADE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.CIDADE = tmpContent_tDBInput_1;
                }
            } else {
                row1.CIDADE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.UF = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.UF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.UF = tmpContent_tDBInput_1;
                }
            } else {
                row1.UF = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.NUMERO_PEDIDO = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NUMERO_PEDIDO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.NUMERO_PEDIDO = tmpContent_tDBInput_1;
                }
            } else {
                row1.NUMERO_PEDIDO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.DATA_ABERTURA_PRIMEIRA = null;
							} else {
										
			row1.DATA_ABERTURA_PRIMEIRA = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 4);
			
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.FAIXA_AGING_PEDIDO = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.FAIXA_AGING_PEDIDO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.FAIXA_AGING_PEDIDO = tmpContent_tDBInput_1;
                }
            } else {
                row1.FAIXA_AGING_PEDIDO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.AGING_DAY_CLIENTE = null;
							} else {
		                          
            row1.AGING_DAY_CLIENTE = rs_tDBInput_1.getInt(6);
            if(rs_tDBInput_1.wasNull()){
                    row1.AGING_DAY_CLIENTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.INICIOAGENDAMENTO = null;
							} else {
										
			row1.INICIOAGENDAMENTO = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 7);
			
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.FLAG_TIPO = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(8);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.FLAG_TIPO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.FLAG_TIPO = tmpContent_tDBInput_1;
                }
            } else {
                row1.FLAG_TIPO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.FAIXA_AGENDAMENTO = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(9);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.FAIXA_AGENDAMENTO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.FAIXA_AGENDAMENTO = tmpContent_tDBInput_1;
                }
            } else {
                row1.FAIXA_AGENDAMENTO = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

SAIDA = null;


// # Output table : 'SAIDA'
SAIDA_tmp.CIDADE = row1.CIDADE ;
SAIDA_tmp.UF = row1.UF ;
SAIDA_tmp.NUMERO_PEDIDO = row1.NUMERO_PEDIDO ;
SAIDA_tmp.DATA_ABERTURA_PRIMEIRA = row1.DATA_ABERTURA_PRIMEIRA ;
SAIDA_tmp.FAIXA_AGING_PEDIDO = row1.FAIXA_AGING_PEDIDO ;
SAIDA_tmp.AGING_DAY_CLIENTE = row1.AGING_DAY_CLIENTE ;
SAIDA_tmp.INICIOAGENDAMENTO = row1.INICIOAGENDAMENTO ;
SAIDA_tmp.FLAG_TIPO = row1.FLAG_TIPO ;
SAIDA_tmp.FAIXA_AGENDAMENTO = row1.FAIXA_AGENDAMENTO ;
SAIDA = SAIDA_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "SAIDA"
if(SAIDA != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"SAIDA");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(SAIDA.CIDADE != null) {
                        sb_tFileOutputDelimited_1.append(
                            SAIDA.CIDADE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(SAIDA.UF != null) {
                        sb_tFileOutputDelimited_1.append(
                            SAIDA.UF
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(SAIDA.NUMERO_PEDIDO != null) {
                        sb_tFileOutputDelimited_1.append(
                            SAIDA.NUMERO_PEDIDO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(SAIDA.DATA_ABERTURA_PRIMEIRA != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(SAIDA.DATA_ABERTURA_PRIMEIRA, "dd-MM-yyyy HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(SAIDA.FAIXA_AGING_PEDIDO != null) {
                        sb_tFileOutputDelimited_1.append(
                            SAIDA.FAIXA_AGING_PEDIDO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(SAIDA.AGING_DAY_CLIENTE != null) {
                        sb_tFileOutputDelimited_1.append(
                            SAIDA.AGING_DAY_CLIENTE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(SAIDA.INICIOAGENDAMENTO != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(SAIDA.INICIOAGENDAMENTO, "dd-MM-yyyy HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(SAIDA.FLAG_TIPO != null) {
                        sb_tFileOutputDelimited_1.append(
                            SAIDA.FLAG_TIPO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(SAIDA.FAIXA_AGENDAMENTO != null) {
                        sb_tFileOutputDelimited_1.append(
                            SAIDA.FAIXA_AGENDAMENTO
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "SAIDA"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SAIDA");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final SIEBEL_CLICK SIEBEL_CLICKClass = new SIEBEL_CLICK();

        int exitCode = SIEBEL_CLICKClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = SIEBEL_CLICK.class.getClassLoader().getResourceAsStream("teste/siebel_click_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = SIEBEL_CLICK.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : SIEBEL_CLICK");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     65379 characters generated by Talend Open Studio for Data Integration 
 *     on the 11 de Janeiro de 2022 14h26min1s BRT
 ************************************************************************************************/